const Discord = require("discord.js");
const client = new Discord.Client();
const config = require("./config.json");
const db = require("./db.json");
const agroify = require("./agroify");
const mineflayer = require("mineflayer");
const fs = require("fs");
const cheeseTotal = {
  total: db.total,
  whitelistedServerIds: db.whitelistedServerIds,
};

setTimeout(function () {
  writeToDB();
  console.log("written to db");
}, 5000);

const bot = mineflayer.createBot({
  host: config.minecraftAccount.server,
  port: config.minecraftAccount.port,
  username: config.minecraftAccount.email,
  password: config.minecraftAccount.password,
  version: config.minecraftAccount.version,
  auth: config.minecraftAccount.auth,
  version: config.minecraftAccount.version,
});

function rand(min, max) {
  let randomNum = Math.random() * (max - min) + min;
  return Math.floor(randomNum);
}

function cheeseGuild() {
  bot.chat(`/g kick ${config.minecraft.usernameToKick} trollololol cheesed`);
  setTimeout(() => {
    bot.chat(`/g invite ${config.minecraft.usernameToKick}`);
  }, 3000);
  console.log("guy just got cheesed in guild");
}

function writeToDB() {
  let data = JSON.stringify(cheeseTotal);
  fs.writeFileSync("./db.json", data);
}

function readFromDB() {
  let data = fs.readFileSync("./db.json");
  let obj = JSON.parse(data);
  return obj.total;
}

const whitelistedId = async (authorId) => {
  const whitelistedIds = config.bot.whitelistedIds;
  if (whitelistedIds.includes(authorId)) return true;

  return false;
};

client.on("ready", () => {
  console.log(`logged in as ${client.user.tag}`);
  client.user.setStatus("idle");
  client.user.setPresence({
    status: "idle",
    activity: {
      name: "captaincheddarü§£ü§£ü§£üòéüòé",
      type: "WATCHING",
    },
  });
});

client.on("message", function (message) {
  if (message.author.bot) return;
  if (!message.content.startsWith(config.bot.prefix)) return;
  const commandBody = message.content.slice(config.bot.prefix.length);
  const args = commandBody.split(" ");
  const command = args.shift().toLowerCase();

  function kick(command2, userID, kickMessage, pronoun, pronoun2, count) {
    const memberToKick = message.guild.members.cache.get(userID);
    if (command === command2) {
      if (memberToKick && memberToKick.kickable) {
        if (count === true) {
          cheeseTotal.total++;
          writeToDB(cheeseTotal);
          console.log(`cheddar has been cheesed (successful) ${db.total}`);
        } else if (count === false) {
          console.log("counting was false");
        }
        message.reply(kickMessage);
        memberToKick.kick("GET CHEESED TROLOLOL");
      } else if (!memberToKick) {
        message.reply(`${pronoun} IS NOT IN THE SERVER ANYMORE üò≠üò≠üò≠`);
      } else if (!memberToKick.kickable) {
        message.reply(`I DONT HAVE PERMS TO KICK ${pronoun2} !!! üò≠üò≠üò≠`);
        console.log("NO PERMS!!");
      } else {
        message.reply(`I COULDNT FREAKING KICK ${pronoun2} WTF???`);
      }
    }
  }

  kick(
    "cheese",
    config.idsToKick.ids[0],
    "CHEESED TROLOLOLOLOL <:emoji:735308015607218279> https://media.discordapp.net/attachments/735022070286778408/760201509702729768/caption.gif",
    "he",
    "him",
    true
  );
  kick(
    "catfish",
    config.idsToKick.ids[1],
    "https://cdn.discordapp.com/attachments/625062074245971979/800532282372653086/unknown.png",
    "she",
    "her",
    false
  );
  if (command === "help") {
    const helpEmbed = new Discord.MessageEmbed()
      .setColor("#FFDC00")
      .setTitle("cheesed help üôÄüôÄüòºüôÄüòº")
      .setThumbnail(
        "https://cdn.discordapp.com/avatars/801873143437983754/7d247a3dfdbe79817391c6d62d135ee7.png?size=256"
      )
      .addFields(
        { name: "!cheese", value: "cheeses üôÄüòº" },
        { name: "!catfish", value: "trolls herbman" },
        { name: "agroify [image url]", value: "awesomes the image" },
        { name: "!count", value: "tells u amount of cheese" },
        {
          name: "!blacklistserver",
          value: "stops server from getting trolled by your, sus, and rule",
        },
        {
          name: "!unblacklistserver",
          value: "does opposite of last command",
        }
      )
      .setFooter(
        "made by jonah",
        "https://cdn.discordapp.com/avatars/738605862872023048/a751915cef7f8e6b8e84fc59f141bdc7.png?size=256"
      );
    message.channel.send(helpEmbed);
  } else if (command === "count") {
    message.channel.send(
      `captaincheddar has been cheesed ${db.total} times <:emoji:735308015607218279>`
    );
  } else if (command === "blacklistserver") {
    const server = message.guild.id;
    if (!db.whitelistedServerIds.includes(server)) {
      cheeseTotal.whitelistedServerIds.push(server);
      writeToDB();
      message.channel.send("blacklisted server");
    } else {
      message.channel.send("server already blacklisted");
    }
    //console.log(server);
  } else if (command === "unblacklistserver") {
    const serverId = message.guild.id;
    cheeseTotal.whitelistedServerIds.splice(
      cheeseTotal.whitelistedServerIds.findIndex((id) => id === serverId)
    );
    writeToDB();
    message.channel.send("unblacklisted server");
  } else if (command === "cheesg") {
    cheeseGuild();
    message.channel.send("<:emoji:735308015607218279>");
  }
});

client.on("message", function (message) {
  if (message.author.bot) return;
  if (message.content.startsWith("agroify")) return agroify.makeFile(message);
    function wordResponse(word, reply) {
    const isInArray = db.whitelistedServerIds.includes(message.guild.id);
    if (message.content.toLowerCase().includes(word) && isInArray === false) {
      //  message.channel.send(config.bot.yourResponse[0]);
      message.channel.send(reply[rand(0, reply.length)]);
    }
  }
  wordResponse("your", config.bot.yourResponse);
  //wordResponse("ur", config.bot.yourResponse);
  wordResponse("sus", config.bot.susResponse);
  wordResponse("rule", config.bot.ruleResponse);
  wordResponse("obama", [
     `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†õ‚†õ‚†õ‚†â‚†â‚†â‚†ã‚†õ‚†õ‚†õ‚†ª‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†õ‚†â‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†â‚†ô‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†ã‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†è‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ç‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚†Ñ‚¢†‚†Ñ‚†Ñ‚°Ä‚†Ñ‚†Ñ‚¢Ä‚†Ç‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Å‚†Ñ‚†Ñ‚¢õ‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚°à‚¢î‚†∏‚£ê‚¢ï‚¢ï‚¢µ‚¢∞‚¢±‚¢∞‚¢ê‚¢§‚°°‚°¢‚£ï‚¢Ñ‚¢¢‚¢†‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Å‚†Ç‚†Ö‚¢ï‚†å‚°é‚°é‚£é‚¢é‚¢Æ‚¢Æ‚£≥‚°≥‚£ù‚¢Æ‚¢∫‚¢ú‚¢ï‚¢ï‚¢ç‚¢é‚†™‚°ê‚†Ñ‚†Å‚†Ñ‚†∏‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚†Ñ‚†Ñ‚¢Ö‚†£‚°°‚°£‚££‚°≥‚°µ‚£ù‚°Æ‚£ó‚£ó‚°Ø‚£ó‚£ü‚°Æ‚°Æ‚£≥‚££‚£≥‚¢±‚¢±‚†±‚£ê‚†Ñ‚†Ç‚†Ñ‚¢ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ç‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ç‚¢à‚†¢‚°±‚°±‚°ù‚£Æ‚£ø‚£ü‚£ø‚£Ω‚£∑‚£ø‚£Ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£æ‚£Ø‚£ó‚°ï‚°á‚°á‚†Ñ‚†Ç‚°Ä‚¢π‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ç‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚¢Ä‚¢Ç‚¢ï‚¢∏‚¢®‚¢™‚¢≥‚°´‚£ü‚£ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°∫‚°Æ‚°£‚°£‚††‚¢Ç‚†í‚¢∏‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†ê‚†Ñ‚°Ç‚†Ü‚°á‚£ó‚£ù‚¢Æ‚¢æ‚£ª‚£û‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£Ω‚£Ø‚°Ø‚£∫‚¢∏‚¢ò‚†®‚†î‚°Ö‚¢®‚£ø
      ‚£ø‚£ø‚†ã‚†â‚†ô‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Å‚†Ñ‚†Ñ‚†Ñ‚°Ç‚°™‚°™‚°™‚°Æ‚°Æ‚°Ø‚£ª‚£Ω‚£æ‚£ø‚£ø‚£ø‚£ü‚£ø‚£ø‚£ø‚£Ω‚£ø‚£ø‚°Ø‚£Ø‚°∫‚°∏‚°∞‚°±‚¢ê‚°Ö‚£º‚£ø
      ‚£ø‚†°‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†à‚†Ü‚†±‚†ë‚†ù‚†ú‚†ï‚°ù‚°ù‚£û‚¢Ø‚¢ø‚£ø‚£ø‚°ø‚£ü‚£ø‚£ø‚£ø‚°ø‚°ø‚£Ω‚£∑‚£Ω‚°∏‚°®‚°™‚£Ç‚†ä‚£ø‚£ø
      ‚£ø‚†°‚†Ñ‚°®‚£¢‚†ê‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚†ç‚°ì‚£ó‚°Ω‚£ù‚†Ω‚†ç‚†Ö‚†ë‚†Å‚†â‚†ò‚†ò‚†ò‚†µ‚°ë‚¢ú‚¢Ä‚¢Ä‚¢â‚¢Ω
      ‚£ø‚†Å‚††‚¢±‚¢ò‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†à‚†±‚£Å‚†ú‚°ò‚†å‚†Ñ‚†Ñ‚°™‚£≥‚£ü‚°Æ‚¢Ö‚†§‚††‚†Ñ‚†Ñ‚£Ä‚£Ä‚°Ä‚°Ä‚†Ñ‚†à‚°Ç‚¢≤‚°™‚°†‚£ø
      ‚£ø‚°á‚†®‚£∫‚¢ê‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†§‚°†‚°¢‚¢í‚†¶‚††‚†Ñ‚†Ñ‚†Ñ‚°∏‚¢Ω‚£ü‚¢Æ‚†¢‚°Ç‚°ê‚†Ñ‚°à‚°Ä‚†§‚°Ä‚†Ñ‚†ë‚¢Ñ‚†®‚¢∏‚°∫‚£ê‚£ø
      ‚£ø‚£ø‚†à‚†ï‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ç‚°™‚°ê‚°•‚¢§‚£∞‚£∞‚£∞‚°¥‚°Æ‚†¢‚†Ç‚†Ñ‚†Ñ‚°ä‚¢Æ‚¢∫‚¢ï‚¢µ‚¢•‚°¨‚£å‚£í‚°ö‚£î‚¢ö‚¢å‚¢®‚¢ö‚†å‚£æ‚°™‚£æ‚£ø
      ‚£ø‚£ø‚£Ü‚†Ñ‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°ë‚¢ï‚¢ï‚°Ø‚°∑‚£ï‚¢ß‚¢ì‚¢≠‚†®‚°Ä‚†Ñ‚°Ç‚†®‚°®‚£™‚°≥‚£ù‚¢ù‚°Ω‚£ª‚£ª‚£û‚¢Ω‚£≤‚¢≥‚¢±‚¢°‚†±‚†®‚£ü‚¢∫‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚°Ü‚†Ñ‚°Ö‚†á‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚†®‚¢™‚¢π‚¢Ω‚¢Ω‚£∫‚¢ù‚†â‚†Å‚†Å‚†Ñ‚†Ñ‚†Ñ‚¢å‚¢é‚°ñ‚°Ø‚°é‚°ó‚¢ù‚†ú‚£∂‚£Ø‚£ª‚¢Æ‚°ª‚£ü‚£≥‚°ï‚†Ö‚£∑‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£∑‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†î‚°ë‚†ï‚†ù‚†Ñ‚°Ä‚†Ñ‚†Ñ‚†ä‚¢Ü‚†Ç‚†®‚°™‚£∫‚£Æ‚£ø‚°æ‚°ú‚£ú‚°ú‚£Ñ‚†ô‚¢û‚£ø‚¢ø‚°ø‚£ó‚¢ù‚¢∏‚£æ‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚†Ñ‚††‚†Ñ‚††‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ä‚†∫‚°π‚†≥‚°ô‚°ú‚°ì‚°≠‚°∫‚°Ä‚†Ñ‚†£‚°ª‚°π‚°∏‚†®‚££‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†Ñ‚†Ñ‚£Ç‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ñ‚†§‚°§‚°Ñ‚°Ü‚°Ø‚°¢‚°£‚°£‚°ì‚¢ï‚†Ω‚£Ñ‚†Ñ‚†®‚°Ç‚¢å‚£º‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†Ü‚†Ñ‚†∏‚°Ç‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚†Ñ‚¢Ä‚†à‚†Ñ‚†Ç‚†Å‚†ô‚†ù‚†º‚†≠‚†£‚†£‚†£‚†ë‚†å‚†¢‚†£‚°£‚°†‚°ò‚£∞‚£±‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢ë‚†Ñ‚†à‚°±‚†Ñ‚¢ò‚†Ñ‚°Ä‚†®‚¢ê‚£ß‚£≥‚£∑‚£∂‚£¶‚£§‚£¥‚£∂‚£∂‚£∂‚°∂‚†Ñ‚°†‚°¢‚°ï‚£ú‚†é‚°Æ‚££‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†¢‚†Ñ‚†®‚†Ñ‚†Ñ‚†£‚°Ä‚†Ñ‚¢Ä‚¢Ä‚¢ô‚†É‚°ø‚¢ø‚†ø‚°ø‚°ø‚¢ü‚¢ã‚¢î‚°±‚£ù‚¢ú‚°ú‚°™‚°™‚£µ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ö‚†Ñ‚†°‚†Ñ‚†Ñ‚†°‚¢Ä‚¢Ç‚†¢‚°°‚†°‚†£‚°ë‚£è‚¢Ø‚°ª‚°≥‚£π‚°∫‚°™‚¢é‚†é‚°Ü‚¢£‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚†Ñ‚†Ñ‚†Å‚†Ñ‚¢à‚†Ñ‚¢Ç‚†ï‚°ï‚°ù‚¢ï‚¢é‚¢é‚¢Æ‚¢é‚¢Ø‚¢∫‚¢∏‚¢¨‚†£‚¢É‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†®‚°ê‚†å‚¢Ü‚¢á‚¢ß‚¢≠‚££‚°≥‚£µ‚¢´‚£≥‚¢±‚†±‚¢ë‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ü‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Å‚°ä‚¢å‚¢¢‚¢°‚¢£‚¢™‚°∫‚°™‚°é‚°é‚°é‚°ö‚£®‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ï‚°Ö‚¢ó‚¢ï‚°≥‚°≠‚£≥‚¢ï‚†ï‚°±‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†å‚†Ñ‚†ë‚†©‚¢à‚¢Ç‚£±‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
      ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚°Ä‚¢Ñ‚†Ñ‚£Ä‚†Ñ‚°Ä‚£Ä‚¢†‚¢Ñ‚£ñ‚£ñ‚£û‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø`,
  ]);
});

client.login(config.bot.token);
